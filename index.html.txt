<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>迷宫探险 - 免费在线游戏</title>
    <style>
        /* 基础样式 */
        body {
            margin: 0;
            padding: 20px;
            background-color: #f0f8ff;
            font-family: "微软雅黑", Arial, sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        h1 {
            color: #333;
            margin-bottom: 20px;
        }

        /* 游戏信息面板 */
        .game-info {
            width: 100%;
            max-width: 600px;
            background-color: white;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            display: flex;
            justify-content: space-around;
        }

        .info-item {
            text-align: center;
        }

        .info-label {
            font-size: 14px;
            color: #666;
        }

        .info-value {
            font-size: 18px;
            font-weight: bold;
            color: #333;
        }

        /* 游戏画布 */
        #gameCanvas {
            border: 3px solid #333;
            border-radius: 5px;
            background-color: #fff;
            max-width: 100%;
            height: auto;
        }

        /* 难度选择按钮 */
        .difficulty-buttons {
            margin: 15px 0;
            display: flex;
            gap: 10px;
        }

        .diff-btn {
            padding: 8px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s;
        }

        .easy {
            background-color: #4CAF50;
            color: white;
        }

        .medium {
            background-color: #2196F3;
            color: white;
        }

        .hard {
            background-color: #f44336;
            color: white;
        }

        .diff-btn:hover {
            opacity: 0.8;
            transform: scale(1.05);
        }

        /* 移动端控制按钮 */
        .mobile-controls {
            display: none;
            margin-top: 20px;
        }

        @media (max-width: 600px) {
            .mobile-controls {
                display: block;
            }
        }

        .control-pad {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 10px;
            width: 250px;
        }

        .control-btn {
            width: 70px;
            height: 70px;
            border-radius: 10px;
            border: none;
            background-color: #ddd;
            font-size: 24px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .up {
            grid-column: 2;
            grid-row: 1;
        }

        .left {
            grid-column: 1;
            grid-row: 2;
        }

        .down {
            grid-column: 2;
            grid-row: 2;
        }

        .right {
            grid-column: 3;
            grid-row: 2;
        }

        /* 操作说明 */
        .instructions {
            margin-top: 20px;
            color: #666;
            font-size: 14px;
            text-align: center;
        }
    </style>
</head>
<body>
    <h1>迷宫探险游戏</h1>

    <div class="game-info">
        <div class="info-item">
            <div class="info-label">难度</div>
            <div id="difficulty" class="info-value">中等</div>
        </div>
        <div class="info-item">
            <div class="info-label">得分</div>
            <div id="score" class="info-value">0</div>
        </div>
        <div class="info-item">
            <div class="info-label">时间</div>
            <div id="time" class="info-value">0.0s</div>
        </div>
    </div>

    <!-- 游戏画布 -->
    <canvas id="gameCanvas" width="600" height="600"></canvas>

    <!-- 难度选择 -->
    <div class="difficulty-buttons">
        <button class="diff-btn easy" id="easyBtn">简单</button>
        <button class="diff-btn medium" id="mediumBtn">中等</button>
        <button class="diff-btn hard" id="hardBtn">困难</button>
    </div>

    <!-- 移动端控制按钮 -->
    <div class="mobile-controls">
        <div class="control-pad">
            <button class="control-btn up" id="upBtn">↑</button>
            <button class="control-btn left" id="leftBtn">←</button>
            <button class="control-btn down" id="downBtn">↓</button>
            <button class="control-btn right" id="rightBtn">→</button>
        </div>
    </div>

    <!-- 操作说明 -->
    <div class="instructions">
        <p>电脑：方向键移动 | 空格开始 | R重置</p>
        <p>手机：点击方向按钮移动</p>
    </div>

    <script>
        // 获取画布和上下文
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        // 游戏配置
        const DIFFICULTIES = {
            easy: { 
                size: 15, 
                obstacles: 5, 
                wallColor: '#4CAF50', 
                floorColor: '#E8F5E9' 
            },
            medium: { 
                size: 25, 
                obstacles: 15, 
                wallColor: '#2196F3', 
                floorColor: '#E3F2FD' 
            },
            hard: { 
                size: 35, 
                obstacles: 30, 
                wallColor: '#D32F2F', 
                floorColor: '#FFEBEE' 
            }
        };

        // 游戏状态
        let gameState = {
            difficulty: 'medium',
            score: 0,
            time: 0,
            isPlaying: false,
            maze: [],
            playerPos: { x: 0, y: 0 },
            endPos: { x: 0, y: 0 },
            collectibles: [],
            cellSize: 20,
            timer: null
        };

        // 初始化游戏
        function initGame() {
            const diff = DIFFICULTIES[gameState.difficulty];
            // 根据屏幕大小自动调整单元格尺寸
            const maxCellSize = Math.floor(
                Math.min(window.innerWidth, window.innerHeight - 200) / diff.size
            );
            gameState.cellSize = Math.min(40, maxCellSize);
            
            // 生成迷宫
            generateMaze(diff.size);
            
            // 重置状态
            gameState.score = 0;
            gameState.time = 0;
            updateUI();
            drawMaze();
        }

        // 生成迷宫（递归回溯算法）
        function generateMaze(size) {
            // 初始化迷宫（1为墙，0为通路）
            const maze = Array.from({ length: size }, () => Array(size).fill(1));
            
            // 递归挖路函数
            function carve(x, y) {
                maze[y][x] = 0; // 标记当前位置为通路
                
                // 随机方向
                const directions = [[0, 1], [1, 0], [0, -1], [-1, 0]];
                directions.sort(() => Math.random() - 0.5);
                
                for (const [dx, dy] of directions) {
                    const nx = x + 2 * dx;
                    const ny = y + 2 * dy;
                    if (nx >= 0 && nx < size && ny >= 0 && ny < size && maze[ny][nx] === 1) {
                        maze[y + dy][x + dx] = 0; // 打通中间的墙
                        carve(nx, ny);
                    }
                }
            }
            
            // 从左上角开始挖路（确保是奇数位置）
            carve(0, 0);
            gameState.maze = maze;
            gameState.playerPos = { x: 0, y: 0 };
            
            // 随机设置终点
            let endX, endY;
            do {
                endX = Math.floor(Math.random() * size);
                endY = Math.floor(Math.random() * size);
            } while (maze[endY][endX] === 1 || (endX === 0 && endY === 0));
            gameState.endPos = { x: endX, y: endY };
            
            // 生成收集物
            generateCollectibles(size);
        }

        // 生成收集物
        function generateCollectibles(size) {
            const count = DIFFICULTIES[gameState.difficulty].obstacles / 2;
            gameState.collectibles = [];
            
            for (let i = 0; i < count; i++) {
                let x, y;
                do {
                    x = Math.floor(Math.random() * size);
                    y = Math.floor(Math.random() * size);
                } while (
                    gameState.maze[y][x] === 1 || 
                    (x === gameState.playerPos.x && y === gameState.playerPos.y) ||
                    (x === gameState.endPos.x && y === gameState.endPos.y) ||
                    gameState.collectibles.some(c => c.x === x && c.y === y)
                );
                gameState.collectibles.push({ x, y });
            }
        }

        // 绘制迷宫
        function drawMaze() {
            const { maze, playerPos, endPos, collectibles, cellSize } = gameState;
            const size = maze.length;
            
            // 清空画布
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // 计算偏移量（居中显示）
            const mazeWidth = size * cellSize;
            const mazeHeight = size * cellSize;
            const offsetX = (canvas.width - mazeWidth) / 2;
            const offsetY = (canvas.height - mazeHeight) / 2;
            
            // 绘制墙壁和通路
            for (let y = 0; y < size; y++) {
                for (let x = 0; x < size; x++) {
                    const xPos = offsetX + x * cellSize;
                    const yPos = offsetY + y * cellSize;
                    
                    // 绘制单元格
                    ctx.fillStyle = maze[y][x] === 1 
                        ? DIFFICULTIES[gameState.difficulty].wallColor 
                        : DIFFICULTIES[gameState.difficulty].floorColor;
                    ctx.fillRect(xPos, yPos, cellSize, cellSize);
                    
                    // 绘制边框
                    ctx.strokeStyle = '#ffffff33';
                    ctx.strokeRect(xPos, yPos, cellSize, cellSize);
                }
            }
            
            // 绘制收集物（黄色圆点）
            collectibles.forEach(({ x, y }) => {
                const xPos = offsetX + x * cellSize + cellSize / 2;
                const yPos = offsetY + y * cellSize + cellSize / 2;
                ctx.fillStyle = '#FFC107';
                ctx.beginPath();
                ctx.arc(xPos, yPos, cellSize / 6, 0, Math.PI * 2);
                ctx.fill();
            });
            
            // 绘制终点（高对比度红色）
            const endXPos = offsetX + endPos.x * cellSize + cellSize / 2;
            const endYPos = offsetY + endPos.y * cellSize + cellSize / 2;
            ctx.fillStyle = '#FF5722';
            ctx.beginPath();
            ctx.arc(endXPos, endYPos, cellSize / 2 - 2, 0, Math.PI * 2);
            ctx.fill();
            
            // 绘制玩家（青色）
            const playerXPos = offsetX + playerPos.x * cellSize + cellSize / 2;
            const playerYPos = offsetY + playerPos.y * cellSize + cellSize / 2;
            ctx.fillStyle = '#00BCD4';
            ctx.beginPath();
            ctx.arc(playerXPos, playerYPos, cellSize / 3, 0, Math.PI * 2);
            ctx.fill();
        }

        // 更新UI显示
        function updateUI() {
            document.getElementById('difficulty').textContent = 
                gameState.difficulty === 'easy' ? '简单' : 
                gameState.difficulty === 'medium' ? '中等' : '困难';
            document.getElementById('score').textContent = gameState.score;
            document.getElementById('time').textContent = `${gameState.time.toFixed(1)}s`;
        }

        // 移动玩家
        function movePlayer(dx, dy) {
            if (!gameState.isPlaying) return;
            
            const { playerPos, maze } = gameState;
            const newX = playerPos.x + dx;
            const newY = playerPos.y + dy;
            const size = maze.length;
            
            // 检查是否在边界内且是通路
            if (newX >= 0 && newX < size && newY >= 0 && newY < size && maze[newY][newX] === 0) {
                // 更新位置
                gameState.playerPos = { x: newX, y: newY };
                
                // 检查是否收集到物品
                const collectibleIndex = gameState.collectibles.findIndex(
                    c => c.x === newX && c.y === newY
                );
                if (collectibleIndex !== -1) {
                    gameState.collectibles.splice(collectibleIndex, 1);
                    gameState.score += 100;
                    updateUI();
                }
                
                // 检查是否到达终点
                if (newX === gameState.endPos.x && newY === gameState.endPos.y) {
                    gameState.isPlaying = false;
                    clearInterval(gameState.timer);
                    alert(`恭喜通关！得分: ${gameState.score}，用时: ${gameState.time.toFixed(1)}秒`);
                    initGame();
                    return;
                }
                
                drawMaze();
            }
        }

        // 绑定事件
        function bindEvents() {
            // 键盘控制
            window.addEventListener('keydown', (e) => {
                switch(e.key) {
                    case 'ArrowUp': movePlayer(0, -1); break;
                    case 'ArrowDown': movePlayer(0, 1); break;
                    case 'ArrowLeft': movePlayer(-1, 0); break;
                    case 'ArrowRight': movePlayer(1, 0); break;
                    case ' ': // 空格键开始游戏
                        if (!gameState.isPlaying) {
                            gameState.isPlaying = true;
                            gameState.timer = setInterval(() => {
                                gameState.time += 0.1;
                                updateUI();
                            }, 100);
                        }
                        break;
                    case 'r': // R键重置游戏
                    case 'R':
                        gameState.isPlaying = false;
                        clearInterval(gameState.timer);
                        initGame();
                        break;
                }
            });
            
            // 移动端按钮控制
            document.getElementById('upBtn').addEventListener('click', () => movePlayer(0, -1));
            document.getElementById('downBtn').addEventListener('click', () => movePlayer(0, 1));
            document.getElementById('leftBtn').addEventListener('click', () => movePlayer(-1, 0));
            document.getElementById('rightBtn').addEventListener('click', () => movePlayer(1, 0));
            
            // 难度选择
            document.getElementById('easyBtn').addEventListener('click', () => {
                gameState.difficulty = 'easy';
                gameState.isPlaying = false;
                clearInterval(gameState.timer);
                initGame();
            });
            document.getElementById('mediumBtn').addEventListener('click', () => {
                gameState.difficulty = 'medium';
                gameState.isPlaying = false;
                clearInterval(gameState.timer);
                initGame();
            });
            document.getElementById('hardBtn').addEventListener('click', () => {
                gameState.difficulty = 'hard';
                gameState.isPlaying = false;
                clearInterval(gameState.timer);
                initGame();
            });

            // 窗口大小变化时重新绘制
            window.addEventListener('resize', () => {
                if (!gameState.isPlaying) {
                    initGame();
                }
            });
        }

        // 启动游戏
        window.onload = () => {
            initGame();
            bindEvents();
        };
    </script>
</body>
</html>
    